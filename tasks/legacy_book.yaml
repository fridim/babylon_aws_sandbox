- environment:
    AWS_ACCESS_KEY_ID: "{{ pool_manager_aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ pool_manager_aws_secret_access_key }}"
  block:
    - when: query1.Count == 0
      block:
        - name: Gather facts for ansible_date_time
          setup:
            filter: ansible_date_time
            gather_subset: min

        - name: Get first available sandboxes older than 24h
          vars:
            _yesterday: >-
              {{ ansible_date_time.epoch | int
              - babylon_aws_sandbox_min_age | int }}
            _values:
              ":a":
                BOOL: true
              ":b":
                N: "{{ _yesterday }}"
              ":reservation":
                S: "{{ sandbox_api_reservation }}"
              ":empty":
                S: ""

          command: >-
            aws
            --region {{ pool_region }}
            dynamodb scan
            --table-name {{ pool_table }}
            --filter-expression 'available = :a
            and #U < :b
            and attribute_exists(aws_access_key_id)
            and attribute_exists(aws_secret_access_key)
            and attribute_exists(hosted_zone_id)
            and attribute_exists(#Z)
            {% if sandbox_api_reservation -%}
            and reservation = :reservation
            {% else %}
            and (attribute_not_exists(reservation) or reservation = :empty)
            {%- endif %}
            and attribute_exists(account_id)'
            --expression-attribute-values {{ _values | to_json | quote }}
            --expression-attribute-names
            '{"#Z": "zone", "#U": "aws:rep:updatetime"}'
            --max-item {{ buffer }}
          register: r_shortlist
          changed_when: false

        - name: Save reply output of previous command as object
          set_fact:
            r_shortlist_reply: >-
              {{ r_shortlist.stdout | from_json }}

        - when: r_shortlist_reply.Count | int == 0
          block:
            - name: Get first available sandboxes again without 24h constraint
              vars:
                _values:
                  ":a":
                    BOOL: true
                  ":reservation":
                    S: "{{ sandbox_api_reservation }}"
                  ":empty":
                    S: ""
              command: >-
                aws
                --region {{ pool_region }}
                dynamodb scan
                --table-name {{ pool_table }}
                --filter-expression 'available = :a
                and attribute_exists(aws_access_key_id)
                and attribute_exists(aws_secret_access_key)
                and attribute_exists(hosted_zone_id)
                and attribute_exists(#Z)
                {% if sandbox_api_reservation -%}
                and reservation = :reservation
                {% else %}
                and (attribute_not_exists(reservation) or reservation = :empty)
                {%- endif %}
                and attribute_exists(account_id)'
                --expression-attribute-values {{ _values | to_json | quote }}
                --expression-attribute-names '{"#Z": "zone"}'
                --max-item {{ buffer }}
              register: r_shortlist_bis
              changed_when: false

            - name: Override reply output object (all available sandboxes)
              set_fact:
                r_shortlist_reply: "{{ r_shortlist_bis.stdout | from_json }}"


        - name: Save the list of the first free sandboxes
          set_fact:
            sandbox_shortlist: "{{ r_shortlist_reply | json_query('Items[*].name.S') }}"

        - name: Get the cluster console
          k8s_info:
            api_version: v1
            kind: ConfigMap
            namespace: openshift-config-managed
            name: console-public
          register: r_ocp_console_public
          changed_when: false

        - name: Set ocp_console_url
          set_fact:
            ocp_console_url: "{{ r_ocp_console_public.resources[0].data.consoleURL | default('') }}"

        - name: Book a sandbox among the list
          vars:
            _data:
              ":av":
                BOOL: false
              ":currval":
                BOOL: true
              ":gu":
                S: "{{ guid }}"
              ":uu":
                S: "{{ uuid }}"
              ":en":
                S: "{{ env_type }}"
              ":ow":
                S: "{{ student_name | default('unknown') }}"
              ":email":
                S: "{{ email | default('unknown') }}"
              ":co":
                S: "{{ ocp_console_url }}"
          shell: >-
            for sandbox_name in {{ sandbox_shortlist | join(' ') }}; do
            aws --region {{ pool_region }}
            dynamodb update-item
            --table-name {{ pool_table }}
            --key "{\"name\": {\"S\": \"${sandbox_name}\"}}"
            --condition-expression "available = :currval"
            --update-expression
            "SET available = :av,
            guid = :gu, envtype = :en,
            service_uuid = :uu,
            #o = :ow, owner_email = :email,
            #c = :co"
            --expression-attribute-values '{{ _data | to_json }}'
            --expression-attribute-names '{"#o":"owner","#c":"comment"}';
            if [ $? = 0 ]; then echo $sandbox_name; break; fi;
            done;
          register: _putaccount

        - debug:
            var: r_shortlist_reply
            verbosity: 2

        - debug:
            var: _putaccount
            verbosity: 2

        - set_fact:
            sandbox_picked: >-
              {{ r_shortlist_reply
              | json_query('Items[*]')
              | selectattr('name.S', 'equalto', _putaccount.stdout)
              | list }}

        - name: Make sure at least one sandbox is returned
          when: sandbox_picked | length == 0
          fail:
            msg: Could not get a sandbox. Probably too many concurrent requests.

        - name: Save sandbox variables
          set_fact:
            sandbox_name: "{{ _item.name.S }}"
            sandbox_account: "{{ _item.account_id.S }}"
            sandbox_account_id: "{{ _item.account_id.S }}"
            sandbox_zone: "{{ _item.zone.S }}"
            sandbox_hosted_zone_id: "{{ _item.hosted_zone_id.S }}"
            sandbox_aws_access_key_id: "{{ _item.aws_access_key_id.S }}"
            sandbox_aws_secret_access_key: "{{ _item.aws_secret_access_key.S }}"
          vars:
            _item: "{{ sandbox_picked | first }}"

        - name: Unvault IAM key secret
          vars:
            vaulted_text: "{{ sandbox_aws_secret_access_key }}"
          include_tasks: unvault.yml

        - include_tasks: set_aws_sandbox.yaml
