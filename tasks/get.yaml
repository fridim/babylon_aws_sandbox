---
# First, try to get the information from the sandbox API using uuid and Placement
- when: sandbox_api_login_token | default("") != ""
  block:
    - include_tasks: sandbox_api_login.yaml
    - include_tasks: sandbox_api_get.yaml

# If no placement was found, try compatibility mode (legacy), query dynamoDB
# TODO: remove later
# (when everything is using the sandbox-api and all services have a Placement in DB)
- when:
    - sandbox_name is not defined
    - pool_manager_aws_access_key_id | default('', true) != ''
  include_tasks: legacy_get.yaml

# If no sandbox associated, book a new one using the Sandbox API
- when: >-
    sandbox_name is not defined
    and sandbox_api_login_token | default("") != ""
  include_tasks: sandbox_api_book.yaml

# Keep this in case sandbox_api_token is not defined
# TODO: remove later
- when:
    - sandbox_name is not defined
    - pool_manager_aws_access_key_id | default('', true) != ''
  include_tasks: legacy_book.yaml

- debug:
    msg: >-
      Sandbox {{ sandbox_name }} picked
      uuid={{ uuid }}
      guid={{ guid }}
      env_type={{ env_type }}"

- name: Save secret of aws_sandbox_secrets dictionary
  set_fact:
    aws_sandbox_secrets:
      sandbox_aws_access_key_id: "{{ sandbox_aws_access_key_id }}"
      sandbox_aws_secret_access_key: "{{ sandbox_aws_secret_access_key }}"
      sandbox_hosted_zone_id: "{{ sandbox_hosted_zone_id }}"
      sandbox_name: "{{ sandbox_name }}"
      sandbox_account: "{{ sandbox_account }}"
      sandbox_account_id: "{{ sandbox_account_id }}"
      sandbox_zone: "{{ sandbox_zone }}"
      # agnosticd
      aws_access_key_id: "{{ sandbox_aws_access_key_id }}"
      aws_secret_access_key: "{{ sandbox_aws_secret_access_key }}"
      HostedZoneId: "{{ sandbox_hosted_zone_id }}"
      subdomain_base_suffix: ".{{ sandbox_zone }}"

- name: Inject secrets into dynamic_job_vars
  set_fact:
    dynamic_job_vars: >-
      {{ vars.dynamic_job_vars
      | default({})
      | combine(aws_sandbox_secrets, recursive=True) }}

- name: Set sandbox for {{ anarchy_subject_name }}
  anarchy_subject_update:
    skip_update_processing: true
    metadata:
      labels:
        sandbox: "{{ sandbox_name }}"
    spec:
      vars:
        job_vars:
          sandbox_name: "{{ sandbox_name }}"
          sandbox_account: "{{ sandbox_account }}"
          sandbox_zone: "{{ sandbox_zone }}"
          sandbox_hosted_zone_id: "{{ sandbox_hosted_zone_id }}"
          # agnosticd
          HostedZoneId: "{{ sandbox_hosted_zone_id }}"
          subdomain_base_suffix: ".{{ sandbox_zone }}"
